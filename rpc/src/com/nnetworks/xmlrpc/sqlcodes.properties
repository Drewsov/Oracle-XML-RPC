[Version]
$Id: sqlcodes.properties,v4.2014 2014/05/01 14:43:13 Andrew A.Toropov Exp $

[getWeblogList]
SELECT id, name, REF_SIZE, disp, TIME_STAMP into ?, ?, ?, ?, ? FROM nn$t_nts_tree where id_folder={F} and DISP= 'DIR' order by TIME_STAMP desc;  

[T_UNIT_ATTRIBUTES]
insert into T_UNIT_ATTRIBUTES (ID,NAME,TYPE,INFO,DATA,INIT)
values (32, 'TITLE',    'V', 'T', null,    '4000'   );
insert into T_UNIT_ATTRIBUTES (ID,NAME,TYPE,INFO,DATA,INIT)
values (33, 'CATEGORIES',    'V', 'T', null,    '4000'   );
insert into T_UNIT_ATTRIBUTES (ID,NAME,TYPE,INFO,DATA,INIT)
values (35, 'TAGS',    'V', 'T', null,    '4000'   );

[getUserInfo]
declare
  sName        varchar2(4000)       := ?;
begin
SELECT info into ? FROM t_persons where upper(name)=upper(sName);
exception when others then null;
end;

[getSlug]
declare
  nUnit        varchar2(4000)       := ?;
begin
select translit into ? from t_unit_translit where id_unit=nUnit;
exception when others then null;
end;

[getPostLookups]
declare
  sType      varchar2(4000)       := ?;
  sOrderBy   varchar2(4000)       := ?;
  type tRefCursor      is ref cursor;
  s varchar2(500) := 'select id,lookup_type, code, description,pos,parent_id,owner_id,status,timestamp from t$lookup where lookup_type in (select id from t$lookup_type where name = '''||sType||''') order by '||sOrderBy;
begin
   open ? for s;
end;

[getCommentbyId]
declare
  sId        varchar2(4000)       := ?;
  sOrderBy   varchar2(4000)       := ?;
  type tRefCursor      is ref cursor;
  s varchar2(500) := 'select id,lookup_type, code, description,pos,parent_id,owner_id,status,timestamp from t$lookup where id = '||sId||' order by '||sOrderBy;
begin
   open ? for s;
end;

[getLookupDescById]
declare
nValue      varchar2(4000) default null;
id$type     varchar2(4000) default null;
nID         number :=?;
BlogName    varchar2(4000) :=?;
begin
   begin
     select description into nValue from t$lookup where id = nID;
    exception when others then null;
     insert into t$lookup_type (id,name) values (t$lookup_type_seq.NEXTVAL,BlogName);
      SELECT id into id$type FROM t$lookup_type where name=BlogName;
      insert into t$lookup (id,lookup_type,code,description,pos,status) values (nID,id$type,BlogName,BlogName,1,1);
      nValue := BlogName;
    end;
? := nValue;   
end;

[getRpcPing]
declare 
id$code  varchar2(4000) := ?;
id$type  varchar2(4000); 
nValue   varchar2(4000) default null; 
begin
begin
 commit;
     select description into nValue from t$lookup where code = id$code;
    exception 
    when no_data_found then  nValue := sqlerrm||':'||id$code;
     begin
      insert into t$lookup_type (id,name) values (t$lookup_type_seq.NEXTVAL,id$code);
      exception when  others then null;
     end;
        SELECT id into id$type FROM t$lookup_type where name=id$code;
        insert into t$lookup (id,lookup_type,code,description,pos,status) values (t$lookup_seq.nextval,id$type,id$code,'http://blogsearch.google.com/ping/RPC2',1,1);
        insert into t$lookup (id,lookup_type,code,description,pos,status) values (t$lookup_seq.nextval,id$type,id$code,'http://ping.blogs.yandex.ru/RPC2',1,1);
        commit;
       when others then null;
  end;
  ? := nValue;
end;

[getCategories]
declare
procedure enumDisp
( rcur    out tRefCursor
)
is
begin
  open rcur for
    select distinct DISP
      from NN$T_NTS_OPER;
exception when others then
  nn$msg_log.err('NTS.enumDisp', sqlerrm);
end enumDisp;
begin
enumDisp(?);
end;

[setPostCategories]
declare
/* setPostCategories */
l_code          varchar2(4000):=?;
l_description   varchar2(4000):=?;
sId             number        :=?;
l_type          varchar2(4000):=?;
begin
    update t$lookup 	
    set   
    code                = l_code, 
    description         = l_description  
    where            id = sId ;
    commit;
end;

[setCommentStatus]
declare
/* setCommentStatus */
l_code          varchar2(4000):=?;
l_description   varchar2(4000):=?;
sId             number        :=?;
l_status        number        :=?;
begin
    update t$lookup 	
    set   
    code                = l_code, 
    description         = l_description,
    status              = l_status
    where            id = sId ;
    commit;
end;

[newCategory]
declare
/* newCategory  */ 
id$type number;
l_code          varchar2(4000):=?;
l_description   varchar2(4000):=?;
sId             number        :=?;
l_type          varchar2(4000):=?;
begin
begin
select id into id$type from t$lookup_type where name = l_type;
exception when no_data_found then
INSERT INTO t$lookup_type (ID,NAME,PARENT_ID,OWNER_ID) VALUES(t$lookup_type_seq.nextval,l_type,NULL,NULL);
select id into id$type from t$lookup_type where name  = l_type;
end;
insert into t$lookup (id,lookup_type,code,description,pos,status) values (t$lookup_seq.nextval,id$type,l_code,l_description,1,1);
commit;
end;

[newParentCategory]
declare
/* newParentCategory */
id$type number;
l_code          varchar2(4000):=?;
l_description   varchar2(4000):=?;
sId             number        :=?;
sParentId       number        :=?;
l_type          varchar2(4000):=?;
begin
begin
select id into id$type from t$lookup_type where name  = l_type;
exception when no_data_found then
INSERT INTO t$lookup_type (ID,NAME,PARENT_ID,OWNER_ID) VALUES(t$lookup_type_seq.nextval,l_type,NULL,NULL);
select id into id$type from t$lookup_type where name  = l_type;
end;
insert into t$lookup (id,lookup_type,code,description,pos,status,parent_id) values (t$lookup_seq.nextval,id$type,l_code,l_description,1,1,sParentId);
commit;
end;

[newComment]
declare
/* newComment */
id$type number;
l_code          varchar2(4000):=?;
l_description   varchar2(4000):=?;
sId             number        :=?;
l_type          varchar2(4000):=?;
begin
begin
select id into id$type from t$lookup_type where name  = l_type;
exception when no_data_found then
INSERT INTO t$lookup_type (ID,NAME,PARENT_ID,OWNER_ID) VALUES(t$lookup_type_seq.nextval,l_type,NULL,NULL);
select id into id$type from t$lookup_type where name  = l_type;
end;
insert into t$lookup (id,lookup_type,code,description,pos,status) values (t$lookup_seq.nextval,id$type,l_code,l_description,1,1);
commit;
end;

[checkLookupExistsByID]
declare
  sId    varchar2(4000) := ?;
  cid    varchar2(4000) := null;
begin
      begin
        select id into cid from t$lookup where id = sId ;
        exception when others then null;
      end;
   ? := cid;
end;

[getAnyLookupByID]
declare
  sId        varchar2(4000)       := ?;
  sOrderBy   varchar2(4000)       := ?;
  type tRefCursor      is ref cursor;
  s varchar2(500) := 'select id,lookup_type, code, description,pos,parent_id,owner_id,status,timestamp from t$lookup where id = '||sId||' order by '||sOrderBy;
begin
   open ? for s;
end;

[getAnyLookupByParentID]
declare
  sId        varchar2(4000)       := ?;
  sOrderBy   varchar2(4000)       := ?;
  type tRefCursor      is ref cursor;
  s varchar2(500) := 'select id,lookup_type, code, description,pos,parent_id,owner_id,status,timestamp from t$lookup where parent_id = '||sId||' order by '||sOrderBy;
begin
   open ? for s;
end;

[getAnyLookupArrayByType]
declare
  l$type     varchar2(4000)       := ?;
  id$type    number; 
  type tRefCursor      is ref cursor;
  s          varchar2(4000);
  first_in_set    number :=  ?;
  last_in_set     number :=  ?;            
begin
begin
select id into id$type from t$lookup_type where name  = l$type;
exception when no_data_found then
INSERT INTO t$lookup_type (ID,NAME,PARENT_ID,OWNER_ID) VALUES(t$lookup_type_seq.nextval,l$type,NULL,NULL);
select id into id$type from t$lookup_type where name  = l$type;
end;
   s := 'select id,lookup_type, code, description,pos,parent_id,owner_id,status,timestamp from t$lookup where t$lookup.lookup_type = '||id$type||' and (parent_id is null or parent_id=0) order by id desc';
   s := 'SELECT * from ( SELECT m.*, rownum rn from ('||s||') m where rownum <= '||last_in_set||' ) where rn > '||first_in_set;
   open ? for s;
end;

[setAnyLookup]
declare
/* setLookup any lookup type */
id$type number;
l$type          varchar2(4000):=?;
l_code          varchar2(4000):=?;
l_description   varchar2(4000):=?;
parent$Id       number        :=?;
nId             number;
begin
begin
select id into id$type from t$lookup_type where name  = l$type;
exception when no_data_found then
INSERT INTO t$lookup_type (ID,NAME,PARENT_ID,OWNER_ID) VALUES(t$lookup_type_seq.nextval,l$type,NULL,NULL);
select id into id$type from t$lookup_type where name  = l$type;
end;
select t$lookup_seq.nextval into nId from dual;
INSERT INTO t$lookup (ID,LOOKUP_TYPE,CODE,DESCRIPTION,POS,STATUS,PARENT_ID) VALUES(nId,id$type,l_code,l_description,1,1,parent$Id);
?:=nId;
commit;
end;

[newParentComment]
declare
/* newParentComment */
id$type number;
l_code          varchar2(4000):=?;
l_description   varchar2(4000):=?;
sId             number        :=?;
l_type          varchar2(4000):=?;
nId             number;
begin
begin
select id into id$type from t$lookup_type where name  = l_type;
exception when no_data_found then
INSERT INTO t$lookup_type (ID,NAME,PARENT_ID,OWNER_ID) VALUES(t$lookup_type_seq.nextval,l_type,NULL,NULL);
select id into id$type from t$lookup_type where name  = l_type;
end;
select t$lookup_seq.nextval into nId from dual;
INSERT INTO t$lookup (ID,LOOKUP_TYPE,CODE,DESCRIPTION,POS,STATUS,PARENT_ID) VALUES(nId,id$type,l_code,l_description,1,1,sId);
?:=nId;
commit;
end;

[deleteCategory]
declare
/* deleteCategory*/
  sType      varchar2(4000)       := ?;
  sOrderBy   varchar2(4000)       := ?;
  sId        number               := ?;
  l_type     varchar2(4000)       := ?;
begin
    delete from t$lookup where id=sId;
    commit;
end;

[sendEnv]
begin NN$PSP_REQ.init; NN$PSP_REQ.setCGIEnv(?,?); end;

[doProc]
begin NN$PSP_RSP.go(?,?); NN$PSP_RSP.getPage(?,?); end;

[doDownload]
begin {P}; NN$PSP_RSP.getPage(?,?); end;

[doUpload]
declare
  s number;
  n varchar2(256) := ?;
  m varchar2(128) := ?; 
  b blob          := ?;
begin
  s := sys.dbms_lob.getLength(b);
  update {T} set DOC_SIZE=s, MIME_TYPE=m, BLOB_CONTENT=b, LAST_UPDATED=sysdate
   where NAME=n;
  if (sql%rowcount = 0) then
    insert into {T}
    (NAME,MIME_TYPE,DOC_SIZE,DAD_CHARSET,LAST_UPDATED,CONTENT_TYPE,BLOB_CONTENT)
    values(n, m, s, 'ascii', sysdate, 'BLOB', b);
  end if;
  commit;
end;

[sendEnvOWA]
declare
  en {A} := ?;
  ev {A} := ?;
  an OWA.vc_arr;
  av OWA.vc_arr;
  i  binary_integer;
  j  binary_integer := 0;
begin
  i := en.first;
  while (i is not null) loop
    j := j + 1;
    an(j) := en(i);
    av(j) := ev(i);
    i := en.next(i);
  end loop;
  i := OWA.initialize;
  OWA.init_cgi_env(j, an, av);
end;

[doProcOWAFlex2]
declare
  pn {A} := ?;
  pv {A} := ?;
  ns {F1};
  vs {F2};
  i  binary_integer;
  j  binary_integer := 0;
begin
  i := pn.first;
  while (i is not null) loop
    j := j + 1;
    ns(j) := pn(i);
    vs(j) := pv(i);
    i := pn.next(i);
  end loop;
  {P}(ns, vs);
end;

[doProcOWAFlex4]
declare
  pn {A} := ?;
  pv {A} := ?;
  ns {F1};
  vs {F2};
  i  binary_integer;
  j  binary_integer := 0;
begin
  i := pn.first;
  while (i is not null) loop
    j := j + 1;
    ns(j) := pn(i);
    vs(j) := pv(i);
    i := pn.next(i);
  end loop;
  {P}(j, ns, vs, vs);
end;

[getPageOWA]
declare
  LF constant char(1) := chr(10);
  pg HTP.htbuf_arr;
  r  raw(32765);
  n  number := 32767;
  i  binary_integer := 1;
  h  varchar2(32767) := '';
  b  blob;
  cs varchar2(100) := ?;
procedure wb( s in raw )
is
begin
  if (s is NULL) then return; end if;
  if ( sys.utl_raw.length(r) + sys.utl_raw.length(s) > 32765 ) then
    sys.dbms_lob.writeAppend(b, sys.utl_raw.length(r), r);
    r := s;
  else
    r := sys.utl_raw.concat(r, s);
  end if;
end wb;
begin
  OWA.get_page(pg, n);
  while (i <= n) loop exit when (pg(i) = LF);
    h := h || pg(i);
    i := i + 1;
  end loop;
  sys.dbms_lob.createTemporary(b, true, sys.dbms_lob.CALL);
  i := i + 1;
  while (i <= n) loop
    wb(sys.utl_raw.cast_to_raw(convert(pg(i),cs)));
    i := i + 1;
  end loop;
  if (sys.utl_raw.length(r) > 0) then
    sys.dbms_lob.writeAppend(b, sys.utl_raw.length(r), r);
  end if;
  ? := h;  ? := b;
  sys.dbms_lob.freeTemporary(b);
end;

[getArgType]
declare
  a  varchar2(64);  b  varchar2(64);
  c  varchar2(64);  d  varchar2(64);
  m  number;        n  number;
  p  varchar2(256) := ?;
  i  number        := ?;
  s  varchar2(256);
  o  number        := ?;
begin
  SYS.DBMS_UTILITY.name_resolve(p, 1, a, b, c, d, m, n);
  select TYPE_OWNER, TYPE_NAME, TYPE_SUBNAME, DATA_TYPE
    into a, b, c, d from ALL_ARGUMENTS
    where OWNER = a and OBJECT_NAME = c
      and ((PACKAGE_NAME = b) or ((PACKAGE_NAME is null) and (b is null)))
      and ((OVERLOAD = o) or (OVERLOAD is null))
      and DATA_LEVEL = 0 and IN_OUT='IN' and POSITION = i;
  if (b is not null) then
    s := b;
    if (a is not null) then s := a || '.' || s; end if;
    if (c is not null) then s := s || '.' || c; end if;
  else
    s := d;
    d := NULL;
  end if;
  ? := s;
  ? := d;
end;

[getArgName]
declare
  a  varchar2(64);  b  varchar2(64);
  c  varchar2(64);  d  varchar2(64);
  m  number;        n  number;
  p  varchar2(256) := ?;
  i  number        := ?;
  o  number        := ?;
begin
  SYS.DBMS_UTILITY.name_resolve(p, 1, a, b, c, d, m, n);
  select ARGUMENT_NAME
    into a from ALL_ARGUMENTS
    where OWNER = a and OBJECT_NAME = c
      and ((PACKAGE_NAME = b) or ((PACKAGE_NAME is null) and (b is null)))
      and ((OVERLOAD = o) or (OVERLOAD is null))
      and DATA_LEVEL = 0 and IN_OUT='IN' and POSITION = i;
  ? := a;
end;

[getOverloadCount]
declare
  a  varchar2(64);  b  varchar2(64);
  c  varchar2(64);  d  varchar2(64);
  m  number;        n  number;
  p  varchar2(256) := ?;
begin
  SYS.DBMS_UTILITY.name_resolve(p, 1, a, b, c, d, m, n);
  select max(TO_NUMBER(OVERLOAD))
    into n from ALL_ARGUMENTS
   where OWNER = a and OBJECT_NAME = c
     and ((PACKAGE_NAME = b) or ((PACKAGE_NAME is null) and (b is null)));
  ? := n;
end;

[doDownloadOWA]
declare
  info varchar2(4000) := null;
begin
  {P};
  if (wpg_docload.is_file_download) then
    wpg_docload.get_download_file(info);
  end if;
  ? := info;
end;

[doDownloadContentDisposition]
declare
  info varchar2(4000) := null;
begin
  -- {P};
  if (wpg_docload.is_file_download) then
    wpg_docload.get_download_file(info);
  end if;
  ? := info;
end;

[getPageBlob]
declare
  LF constant char(1) := chr(10);
  pg HTP.htbuf_arr;
  n  number := 32767;
  i  binary_integer := 1;
  h  varchar2(32767) := '';
  b  blob;
begin
  OWA.get_page(pg, n);
  while (i <= n) loop exit when (pg(i) = LF);
    h := h || pg(i);
    i := i + 1;
  end loop;
  wpg_docload.get_download_blob(b);
  ? := h;  ? := b;
end;

[getPageData]
declare
  sName varchar2(256) := ?;
begin
  select BLOB_CONTENT into ? from {T} where NAME = sName;
end;

[getPageDataDAV]
begin
  select BLOB_CONTENT, DOC_SIZE, MIME_TYPE, LAST_UPDATED into ?, ?, ?, ? from {T} where ID = ?;
end;

[materializeNTSNode]
declare
  r  NN$NTS.tNode;
begin
  NN$NTS.getNode(r, ?);
  ? := r.ID_FOLDER;
  ? := r.PATH;
  ? := r.NAME;
  ? := r.ACCL;
  ? := r.DISP;
  ? := r.ID_REF;
  ? := r.REF_SIZE;
  ? := r.DATA;
  ? := r.TIME_STAMP;
end;

[authenticateDAV]
declare
  sPerson   varchar2(64) := ?;
  sPassword varchar2(64) := ?;
  sPerm     varchar2(64);
  iAccl     integer      := 0;
begin
  NN$PSP_RT.checkPerson(sPerson, sPassword, iAccl);
  if (iAccl > 0) then
    NN$PSP_RT.getPermissions(sPerson, sys_context('USERENV', 'SESSION_USER'), sPerm);
       if (instr(sPerm, 'A', 1) > 0) then iAccl := 6;
    elsif (instr(sPerm, 'D', 1) > 0) then iAccl := 5;
    elsif (instr(sPerm, 'C', 1) > 0) then iAccl := 4;
    elsif (instr(sPerm, 'E', 1) > 0) then iAccl := 3;
    elsif (instr(sPerm, 'V', 1) > 0) then iAccl := 2;
    end if;
  end if;
  ? := iAccl;
end;

[copyNodeDAV]
begin ? := NN$NTS.copyNode(?, ?, ?); end;

[insertCollectionDAV]
begin
  ? := NN$NTS.ensureNode(?, ?, 'DIR');
  commit;
end;

[deleteNodeDAV]
declare
  nKey  number;
  sDisp varchar2(4);
  nRef  number := ?;
  nRes  number;
begin
  SELECT id into nKey FROM nn$t_nts_tree where id_ref=nRef;
  nRes  := NN$NTS.deleteNode(nKey);
  if (nRes > 0) then
      nRef := NN$PSP_UNIT.deleteUnit(nRef);
    commit;
  end if;
  ? := nRes;
end;

[insertDataDAV]
declare
  nDir  number       := ?;
  sName varchar2(64) := ?;
  data  blob         := ?;
  sType varchar2(64) := ?;
  nRef  number;
  nKey  number;
  nSize number;
  n     number;
begin
  nSize := sys.dbms_lob.getLength(data);
  insert into {T} (BLOB_CONTENT, DOC_SIZE, NAME, MIME_TYPE)
  values (data, nSize, sName, sType)
  returning ID into nRef;
  nKey := NN$NTS.ensureNode(nDir, sName, 'DAT');
  n := NN$NTS.setDisp(nKey, 'DAT');
  n := NN$NTS.setRef(nKey, nRef);
  n := NN$NTS.setSize(nKey, nSize);
  n := NN$NTS.setData(nKey, sType);
  ? := nKey;
  commit;
end;

[updateDataDAV]
declare
  data  blob  := ?;
begin
  update {T} set BLOB_CONTENT = data,
    DOC_SIZE = sys.dbms_lob.getLength(data)
   where ID = ?;
  commit;
end;

[createUnitDAV]
declare
  nDir  number         := ?;
  sName varchar2(64)   := ?;
  prof  varchar2(4096) := ?;
  code  clob;
  nRef  number         := ?;
  nKey  number;
  n     number;
begin
  /*nRef := NN$PSP_UNIT.getFreeUnitID;*/
  nKey := NN$NTS.ensureNode(nDir, sName, 'PSP');
  n := NN$NTS.setDisp(nKey, 'PSP');
  n := NN$NTS.setRef(nKey, nRef);
  NN$PSP_UNIT.storeCode(nRef, empty_clob());
  NN$PSP_UNIT.storeProfile(nRef, prof);
  ? := nRef;
end;

[insertUnitBlobDAV]
declare
  nDir  number         := ?;
  sName varchar2(64)   := ?;
  code  blob           := ?;
  prof  varchar2(4096) := ?;
  nRef  number         := ?;
  nKey  number;
  n     number;
begin
  if (nRef is null) then nRef := NN$PSP_UNIT.getFreeUnitID; end if;
  nKey := NN$NTS.ensureNode(nDir, sName, 'PSP');
  n := NN$NTS.setDisp(nKey, 'PSP');
  n := NN$NTS.setRef(nKey, nRef);
  NN$PSP_UNIT.storeCodeBlob(nRef, code);
  NN$PSP_UNIT.storeProfile(nRef, prof);
  commit;
  ? := nKey;
end;

[updateUnitBlobDAV]
declare
  nRef  number := ?;
begin
  NN$PSP_UNIT.storeCodeBlob(nRef, ?);
  NN$PSP_UNIT.storeProfile(nRef, ?);
  commit;
end;

[DPSPImportUnit]
declare
    unitcode clob  := ?;
    nts_path varchar2(4096) := ?;
    prof   nn$psp_unit.tProfile;
    code   clob;
    nUID   number := NULL;
    uName  varchar2(4000);
    uCType varchar2(64);
    uPType varchar2(64);
begin
    dbms_lob.createTemporary(code, false, dbms_lob.call);
    if (dbms_lob.getLength(unitcode) = 0) then
        raise_application_error(-20001, 'The unit is empty or does not exist.');
    else
        -- detect the attributes section and extract attributes into prof and
        -- psp code into code.
        declare
            l_start pls_integer;
            l_end   pls_integer;
            pro_str varchar2(4000);
        begin
            l_start := dbms_lob.instr(unitcode, '<%@attributes') +
                       length('<%@attributes');
            if (l_start = 0) then
                raise_application_error(-20001
                                       ,'Unit attributes section was not found or is malformed.');
            end if;
            l_end   := dbms_lob.instr(unitcode, '%>', l_start);
            pro_str := dbms_lob.substr(unitcode, l_end - l_start, l_start);
            nn$psp_unit.splitProfile(pro_str, prof);
            dbms_lob.copy(code
                         ,unitcode
                         ,dbms_lob.getLength(unitcode) - (l_end + 1)
                         ,1
                         ,l_end + 2);
        end;
        -- find out the unit id, either from attributes, from logical name (attempt
        -- name resolution), or get a new id. Loop through the profile once and
        -- save ID, NAME, CODE_TYPE and PROCESSOR attribute values for future use.
        for i in 1 .. prof.count loop
            if (prof(i).sName = 'ID') then
                nUID := to_number(prof(i).sData);
            elsif (prof(i).sName = 'NAME') then
                uName := prof(i).sData;
            elsif (prof(i).sName = 'CODE_TYPE') then
                uCType := prof(i).sData;
            elsif (prof(i).sName = 'PROCESSOR') then
                uPType := prof(i).sData;
            elsif (prof(i).sName = 'DOMAIN') then
                prof(i).sData := user;
            end if;
        end loop;
        if (nUID is NULL) then
            nUID := nn$psp_unit.resolveName(uName, user);
        end if;
        if (nUID is NULL) then
            nUID := nn$psp_unit.getFreeUnitID;
        end if;
        if (nUID is NULL) then
            raise_application_error(-20001, 'Unable to determine Unit ID.');
        end if;
        nn$psp_unit.storeCode(nUID, code);
        nn$psp_unit.storeProfile(nUID, prof);
    end if;
    if (nts_path is not NULL) then
        declare
            sErr varchar2(4000);
        begin
            NN$NTS.ensureLink(sErr
                             ,nts_path||'/'||uName
                             ,'PSP'
                             ,nUID
                             ,dbms_lob.getLength(code)
                             ,NVL(uCType, 'HTML') || '/' || NVL(uPType, 'FLAT'));
            if (sErr is not NULL) then
                raise_application_error(-20001
                                       ,'Error while registering unit with NTS: ' || sErr);
            end if;
        end;
    end if;
end;

[EnumByUserItems]
DECLARE 
type tRefCursor      is ref cursor;
c_DELIMITER  varchar2(1)  := '/';
c_ACCL_SYSTEM  constant number(1) := 6;
m_nAccl  number(1) := c_ACCL_SYSTEM;
c_DISP_DIR     constant varchar2(3) := 'DIR';
function getPath
( nKey   in  number
) return varchar2
is
  sPath  varchar2(32767);
begin
  if (nKey is null) then return null; end if;
  sPath := '';
  for r in
    (select level, NAME, ID_FOLDER
       from NN$T_NTS_TREE
       connect by ID = prior ID_FOLDER
       start with ID = nKey
       order by level asc
    ) loop
    if (r.ID_FOLDER is null) then -- root
      sPath := concat(c_DELIMITER, sPath);
      exit;
    elsif (r.level = 1) then
      sPath := r.NAME;
    else
      sPath := concat(r.NAME||c_DELIMITER, sPath);
    end if;
  end loop;
  return sPath;
exception when others then
  return null;
end getPath;
procedure enumItems
( rcur    out tRefCursor
, nFolder in  number
, sOrderBy in varchar2
, sUser   in  varchar2  := null
)
is
  sPath  varchar2(4000);
  s varchar2(500) :=
    'select ID, ID_FOLDER, :p || ''/'' || NAME PATH,
            NAME, ACCL, DISP, ID_REF, REF_SIZE, DATA, TIME_STAMP, STATUS, POS, PARAM
       from NN$T_NTS_TREE where ACCL <= :a';
begin
  sPath := getPath(nFolder);
  if (sPath = '/') then 
  sPath := ''; end if;
  if (nFolder is null or sPath is null ) then
    s := s || ' and ID_FOLDER is null  and DISP != :d' || ' order by time_stamp DESC';
    open rcur for s using  sPath, m_nAccl,c_DISP_DIR;
  else 
    s := s || ' and ID_FOLDER = :f  and DISP != :d' || ' and id_ref in (SELECT id_unit FROM t_unit_profile where id_attr=5 and data = :t) order by time_stamp DESC';
    open rcur for s using sPath, m_nAccl, nFolder,c_DISP_DIR,sUser;
  end if;
   -- nn$msg_log.err('enumItems', s ||'      '||sPath||','||nFolder||','||m_nAccl||','|| c_DISP_DIR);
exception when others then
  nn$msg_log.err('enumItems', sqlerrm);
end enumItems;
BEGIN 
enumItems(?, ?, ?, ?);
END;

[EnumItems]
DECLARE 
type tRefCursor      is ref cursor;
c_DELIMITER  varchar2(1)  := '/';
c_ACCL_SYSTEM  constant number(1) := 6;
m_nAccl  number(1) := c_ACCL_SYSTEM;
c_DISP_DIR     constant varchar2(3) := 'DIR';
function getPath
( nKey   in  number
) return varchar2
is
  sPath  varchar2(32767);
begin
  if (nKey is null) then return null; end if;
  sPath := '';
  for r in
    (select level, NAME, ID_FOLDER
       from NN$T_NTS_TREE
       connect by ID = prior ID_FOLDER
       start with ID = nKey
       order by level asc
    ) loop
    if (r.ID_FOLDER is null) then -- root
      sPath := concat(c_DELIMITER, sPath);
      exit;
    elsif (r.level = 1) then
      sPath := r.NAME;
    else
      sPath := concat(r.NAME||c_DELIMITER, sPath);
    end if;
  end loop;
  return sPath;
exception when others then
  return null;
end getPath;
procedure enumItems
( rcur    out tRefCursor
, nFolder in  number
, sDisp   in  varchar2  := null
, sOrderBy in varchar2
)
is
  sPath  varchar2(4000);
  s varchar2(500) :=
    'select ID, ID_FOLDER, :p || ''/'' || NAME PATH,
            NAME, ACCL, DISP, ID_REF, REF_SIZE, DATA, TIME_STAMP, STATUS, POS, PARAM
       from NN$T_NTS_TREE where ACCL <= :a';
begin
  sPath := getPath(nFolder);
  if (sPath = '/') then 
  sPath := ''; end if;
  if (nFolder is null or sPath is null ) then
    s := s || ' and ID_FOLDER is null  and DISP != :d' || ' order by time_stamp DESC';
    open rcur for s using  sPath, m_nAccl,c_DISP_DIR;
  else 
    s := s || ' and ID_FOLDER = :f  and DISP != :d' || ' order by time_stamp DESC';
    open rcur for s using sPath, m_nAccl, nFolder,c_DISP_DIR;
  end if;
   -- nn$msg_log.err('enumItems', s ||'      '||sPath||','||nFolder||','||m_nAccl||','|| c_DISP_DIR);
exception when others then
  nn$msg_log.err('enumItems', sqlerrm);
end enumItems;
BEGIN 
enumItems(?, ?, null,?);
END;

[EnumAllItems]
DECLARE 
type tRefCursor      is ref cursor;
c_DELIMITER  varchar2(1)  := '/';
c_ACCL_SYSTEM  constant number(1) := 6;
m_nAccl  number(1) := c_ACCL_SYSTEM;
c_DISP_DIR     constant varchar2(3) := 'DIR';
procedure enumItems
( rcur    out tRefCursor
, nFolder in  number
, sDisp   in  varchar2  := null
, sOrderBy in varchar2
)
is
  sPath  varchar2(4000);
  s varchar2(500) :=
    'select ID, ID_FOLDER, :p || ''/'' || NAME PATH,
            NAME, ACCL, DISP, ID_REF, REF_SIZE, DATA, TIME_STAMP, STATUS, POS, PARAM
       from NN$T_NTS_TREE where  ACCL <= :a and DISP=''PSP'' ';
begin
    s := s || ' order by time_stamp DESC';
    open rcur for s using sPath, m_nAccl;    
exception when others then
  nn$msg_log.err('enumItems', sqlerrm);
end enumItems;
BEGIN 
enumItems(?, ?, null,?);
END;

[StoreWeblogCode]
DECLARE 
buf NN$TP.VARCHAR_ARRAY;
c  clob;
FUNCTION c2b(c IN CLOB) RETURN BLOB  	  
                 		  IS 
                 		    pos       PLS_INTEGER  := 1;  
                 		    buffer    RAW( 32767 );  
                 		    res       BLOB;  
                 		    lob_len   PLS_INTEGER  := DBMS_LOB.getLength( c ); 
                 		  BEGIN  
                 		    DBMS_LOB.createTemporary( res, TRUE );  
                 		    DBMS_LOB.OPEN( res, DBMS_LOB.LOB_ReadWrite ); 
               		          LOOP  
                 		      buffer := UTL_RAW.cast_to_raw( DBMS_LOB.SUBSTR( c, 16000, pos ) );   
                		      IF UTL_RAW.LENGTH( buffer ) > 0 THEN 
                 		        DBMS_LOB.writeAppend( res, UTL_RAW.LENGTH( buffer ), buffer );   
                 		      END IF;  
          		           pos := pos + 16000;   
                 		      EXIT WHEN pos > lob_len;  
                 		    END LOOP;  
                 		    RETURN res; 
                                    END c2b;
function wrapBuffer(buf in NN$TP.VARCHAR_ARRAY) return clob
is
  c   clob;
  i   pls_integer;
  n   integer;
begin
  dbms_lob.createTemporary(c, true, dbms_lob.call);
  i := buf.first;
  while (i is not null) loop
    n := lengthb(buf(i));
    if (n > 0) then
      dbms_lob.writeAppend(c, n, buf(i));
    end if;
    i := buf.next(i);
  end loop;
  return c;
end wrapBuffer;
BEGIN 
buf(1) := ?;
c  := wrapBuffer(buf);
?  := c2b(c); 
END;

[fetchCodeBLOB]
DECLARE  
sBlob BLOB; 
sClob CLOB; 
--=============================================================================
-- C2B - cast CLOB to BLOB
--=============================================================================
function c2b (c IN CLOB) return BLOB
is
   buf  varchar2(32000 byte);
   rbuf raw(32000);
   pos  pls_integer := 1;
   len  pls_integer := dbms_lob.getLength(c);
   rv   BLOB;
begin
   dbms_lob.createTemporary(rv,false);
   while pos <= len loop
     -- read 8000 *characters* from CLOB - this can be up to 32000 *bytes*
     buf := dbms_lob.substr(c,8000,pos);
     pos := pos + 8000;
     rbuf := utl_raw.cast_to_raw(buf);
     dbms_lob.writeAppend(rv,utl_raw.length(rbuf),rbuf);
   end loop;
   return rv;  
end c2b;
begin 
NN$PSP_UNIT.fetchCodeBlob(?, sBlob, ?); 
? := sBlob;
end;

[fetchCodeCLOB]
declare
sBlob BLOB;
--=============================================================================
-- B2C - cast BLOB to CLOB
--=============================================================================
function b2c (b IN BLOB) return CLOB
is
   rbuf raw(32000);
   buf  varchar2(32000 byte);
   pos  pls_integer := 1;
   len  pls_integer := dbms_lob.getLength(b);
   rv   CLOB;
begin
   dbms_lob.createTemporary(rv,false);
   while pos <= len loop
     rbuf := dbms_lob.substr(b,32000,pos);
     pos := pos + 32000;
     buf := utl_raw.cast_to_varchar2(rbuf);
     dbms_lob.writeAppend(rv,length(buf),buf);
   end loop;
   return rv;
end b2c;
--=============================================================================
begin 
NN$PSP_UNIT.fetchCodeBlob(?, sBlob, ?); 
?:=b2c(sBlob); 
end;

[ensureUnit]
declare 
n$id number := ?;
f$id number default 0; 
begin
 begin
  select id into f$id from t_unit_codes where id = n$id;
   exception when others then null;
 end;
 ? := f$id;
end;